#!/bin/sh

BUILDPACK_DIR=$(cd "$(dirname $0)" && pwd)

mkdir -p "$1" "$2"
BUILD_DIR=$(cd "$1/" && pwd)
CACHE_DIR=$(cd "$2/" && pwd)

ARCHIVES=$CACHE_DIR/archives
TOOLCHAIN=$BUILD_DIR/toolchain
PREFIX=/app/opt
CACHE_PREFIX=$CACHE_DIR/opt

mkdir -p $ARCHIVES $TOOLCHAIN $CACHE_PREFIX
if [ ! -e $PREFIX ]; then
    ln -s $CACHE_PREFIX $PREFIX
fi

TOOL_DIR=$BUILD_DIR/toolchain
ARCHIVE_DIR=$CACHE_DIR/archives
mkdir -p "$TOOL_DIR" "$ARCHIVE_DIR"

indent() {
    sed -u 's/^/       /'
}


LIBEVENT_ARCHIVE_PATH=https://github.com/libevent/libevent/releases/download
LIBEVENT_VERSION=2.0.22
LIBEVENT_RELEASE_TAG="release-$LIBEVENT_VERSION-stable"
LIBEVENT_ARCHIVE="libevent-$LIBEVENT_VERSION-stable"
LIBEVENT_DIR=$TOOLCHAIN/$LIBEVENT_ARCHIVE
LIBEVENT_VERSION=libevent_pthreads-2.0.so.5.1.9

if [ ! -f $PREFIX/lib/$LIBEVENT_VERSION ]; then
    echo
    echo "-----> Building libevent"
    cd $ARCHIVES
    if [ ! -f $LIBEVENT_ARCHIVE.tar.gz ]; then
        rm -f libevent-*.tar.gz
        curl -L --retry 3 "$LIBEVENT_ARCHIVE_PATH/$LIBEVENT_RELEASE_TAG/$LIBEVENT_ARCHIVE.tar.gz" -o $LIBEVENT_ARCHIVE.tar.gz
    fi

    mkdir -p $LIBEVENT_DIR
    cd $LIBEVENT_DIR/..
    rm -rf $LIBEVENT_DIR
    tar xzf $ARCHIVES/$LIBEVENT_ARCHIVE.tar.gz

    cd $LIBEVENT_DIR
    ./configure --prefix=$PREFIX
    make all install
fi


LIBEV_ARCHIVE_PATH=http://dist.schmorp.de/libev
LIBEV_ARCHIVE=libev-4.20
LIBEV_DIR=$TOOLCHAIN/$LIBEV_ARCHIVE
LIBEV_VERSION=libev.so.4.0.0

if [ ! -f $PREFIX/lib/$LIBEV_VERSION ]; then
    echo
    echo "-----> Building libev"
    cd $ARCHIVES
    if [ ! -f $LIBEV_ARCHIVE.tar.gz ]; then
        rm -f libev-*.tar.gz
        curl -L --retry 3 "$LIBEV_ARCHIVE_PATH/$LIBEV_ARCHIVE.tar.gz" -o $LIBEV_ARCHIVE.tar.gz
    fi

    mkdir -p $LIBEV_DIR
    cd $LIBEV_DIR/..
    rm -rf $LIBEV_DIR
    tar xzf $ARCHIVES/$LIBEV_ARCHIVE.tar.gz

    cd $LIBEV_DIR
    ./configure --prefix=$PREFIX
    make all install
fi

cp -R $CACHE_PREFIX $BUILD_DIR/opt


DMD_ARCHIVE_PATH=http://downloads.dlang.org/releases/2015
DMD_ARCHIVE=dmd.2.068.2
DUB_ARCHIVE_PATH=http://code.dlang.org/files
DUB_ARCHIVE=dub-0.9.24-linux-x86_64

# download and unpack binary releases
cd $ARCHIVE_DIR
if [ ! -f $ARCHIVE_DIR/$DMD_ARCHIVE.zip ]; then
    echo
    echo "-----> Downloading DMD"
    rm -f dmd*.zip
    curl $DMD_ARCHIVE_PATH/$DMD_ARCHIVE.zip -o $DMD_ARCHIVE.zip | indent
fi
if [ ! -f $ARCHIVE_DIR/$DUB_ARCHIVE.tar.gz ]; then
    echo
    echo "-----> Downloading dub package manager"
    rm -f dub*.tar.gz
    curl $DUB_ARCHIVE_PATH/$DUB_ARCHIVE.tar.gz -o $DUB_ARCHIVE.tar.gz  | indent
fi

export PATH=$TOOL_DIR/dmd2/linux/bin64:$TOOL_DIR/$DUB_ARCHIVE/bin:$BUILDPACK_DIR:$PATH
echo
echo "-----> Setting PATH: $PATH"
echo
echo "-----> Initializing toolchain"
cd $TOOL_DIR

7za x $ARCHIVE_DIR/$DMD_ARCHIVE.zip > /dev/null
mkdir -p $TOOL_DIR/$DUB_ARCHIVE/bin
cd $TOOL_DIR/$DUB_ARCHIVE/bin
tar xzf $ARCHIVE_DIR/$DUB_ARCHIVE.tar.gz


echo
echo "-----> Building app"

# link the dub cache to the cache folder
mkdir -p $CACHE_DIR/.dub

if [ ! -e $BUILD_DIR/.dub ]; then
    ln -s $CACHE_DIR/.dub $BUILD_DIR/.dub
fi

# check dub.json
if [ ! -s $BUILD_DIR/dub.json ]; then
    echo
    echo "!!! dub.json was empty" | indent
    exit 1
fi

# run dub build
cd $BUILD_DIR
echo
echo "Running dub build" | indent
if dub build --build=release; then
    echo
    echo "Build was successful" | indent
    status=0
else
    echo
    echo "!!! Build failed" | indent
    status=1
fi

# clean up any remaining sources
rm -rf "$TOOL_DIR" source src views

exit $status
